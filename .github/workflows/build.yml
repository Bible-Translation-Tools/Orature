name: Java CI with Gradle
on: [ push, pull_request ]
jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: FranzDiebold/github-env-vars-action@v2.1.0
      - name: Parse SemVer if tagged build
        id: semver_parser
        uses: booxmedialtd/ws-action-parse-semver@v1.4.2
        with:
          input_string: ${{ env.CI_REF_NAME }}
          version_extractor_regex: 'v(.*)$'
        if: contains( github.ref, 'refs/tags/v' )
      - name: set version var for tags and update path for releases
        id: tagged
        run: |
          echo "ORG_GRADLE_PROJECT_gradlewCommandVersionProp=${{ steps.semver_parser.outputs.fullversion }}+$GITHUB_RUN_NUMBER" >> $GITHUB_ENV && \
          echo "UPDATE_PATH=release" >> $GITHUB_ENV && \
          echo "PRERELEASE_BOOL=false" >> $GITHUB_ENV
        if: contains( github.ref, 'refs/tags/v' )
      - name: If this is a tagged pre-release build set pre-release label and update path
        id: prerelease
        run: |
          echo "PRERELEASE_BOOL=true" >> $GITHUB_ENV && \
          echo "UPDATE_PATH=pre-release-updates/${{ steps.semver_parser.outputs.prerelease }}" >> $GITHUB_ENV
        if: ${{ steps.semver_parser.outputs.prerelease }}
      - name: set version var for not-tags and upload dir for branches
        run: |
          echo "ORG_GRADLE_PROJECT_gradlewCommandVersionProp=$(cat VERSION)+$GITHUB_RUN_NUMBER" >> $GITHUB_ENV && \
          echo "UPDATE_PATH=$CI_REF_NAME_SLUG" >> $GITHUB_ENV
        if: ${{ steps.tagged.outcome == 'skipped' }}
      - name: Decrypt secret file
        shell: bash
        run: ./.github/scripts/decrypt_secret.sh
        env:
          LARGE_SECRET_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}
      - name: install4j build
        shell: bash
        run: |
          docker run -v $(pwd):/repo \
          -v $HOME/signing.p12:/root/signing.p12 \
          -e UPDATE_PATH \
          -e ORG_GRADLE_PROJECT_gradlewCommandVersionProp \
          -e ORG_GRADLE_PROJECT_gradlewCommandLicenseProp \
          -e ORG_GRADLE_PROJECT_githubRepoUrl \
          -e ORG_GRADLE_PROJECT_gradlewwinKeystorePassword \
          -e ORG_GRADLE_PROJECT_githubOauthToken \
          -e ORG_GRADLE_PROJECT_sentryDsn \
          -e GITHUB_TOKEN \
          -e SONAR_TOKEN \
          wycliffeassociates/install4j-docker:9.0.2 \
          ./gradlew build codeCoverageReport sonarqube :jvm:workbookapp:install4jdeploy "-Dorg.gradle.jvmargs=-Xmx2048m -XX:MaxMetaspaceSize=512m"
        env:
          ORG_GRADLE_PROJECT_gradlewCommandLicenseProp: ${{ secrets.INSTALL4J_LICENSE_9 }}
          ORG_GRADLE_PROJECT_githubRepoUrl: https://api.github.com/repos/OratureCrashReports/orature-crash-reports/issues
          ORG_GRADLE_PROJECT_gradlewwinKeystorePassword: ${{ secrets.WIN_KEYSTORE_PW }}
          ORG_GRADLE_PROJECT_githubOauthToken: ${{ secrets.GH_API_OAUTH_TOKEN }}
          ORG_GRADLE_PROJECT_sentryDsn: ${{ secrets.SENTRY_OTTER_DSN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: set s3 destination_dir
        run: echo "CURRENT_S3_DESTINATION=$CI_REPOSITORY_OWNER/$CI_REPOSITORY_NAME/$UPDATE_PATH" >> $GITHUB_ENV
      - name: Upload file to bucket
        uses: shallwefootball/s3-upload-action@v1.1.3
        if: github.event_name != 'pull_request'
        with:
          aws_key_id: ${{ secrets.AWS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          aws_bucket: ${{ secrets.AWS_BUCKET }}
          source_dir: ./jvm/workbookapp/.exec
          destination_dir: ${{ env.CURRENT_S3_DESTINATION }}
      - name: upload artifacts to github releases on tags
        uses: "marvinpinto/action-automatic-releases@v1.2.1"
        if: contains( github.ref, 'refs/tags/v' )
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: ${{ env.PRERELEASE_BOOL }}
          files: |
            jvm/workbookapp/.exec/*.exe
            jvm/workbookapp/.exec/*.deb
            jvm/workbookapp/.exec/*.dmg
