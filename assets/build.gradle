import groovy.json.JsonSlurper

plugins {
    id "de.undercouch.download" version "5.6.0"
}

group 'org.wycliffeassociates.otter'
version '0.0.1'

repositories {
    ivy {
        url 'https://content.bibletranslationtools.org'
        patternLayout {
            artifact '[organisation]/[module]/archive/[revision].[ext]'
        }
        metadataSources { artifact() }
    }
    ivy {
        url 'https://langnames.bibleineverylanguage.org/'
        patternLayout {
            artifact '[artifact].[ext]'
        }
        metadataSources { artifact() }
    }
    ivy {
        url 'https://nightlybuilds.s3.amazonaws.com/Bible-Translation-Tools/artwork/'
        patternLayout {
            artifact '[artifact].[ext]'
        }
        metadataSources { artifact() }
    }
    ivy {
        url 'https://nexus-registry.walink.org/repository/maven-releases/'
        patternLayout {
            artifact '[organisation]/[module]/[revision]/[artifact]-[revision].[ext]'
        }
        metadataSources { artifact() }
    }
}

configurations {
    content.extendsFrom runtime
}

dependencies {
    content 'wa-catalog:en_ulb:V21-05@zip'
    content 'bibleineverylanguage:langnames@json'

    implementation project(":common")
    implementation "io.reactivex.rxjava2:rxkotlin:$rxkotlinVer"
    implementation "org.slf4j:slf4j-api:$slf4jApiVer"
    implementation "com.google.dagger:dagger:$daggerVer"
}

tasks.register('downloadGLSources') {
    doLast {
        def jsonFilePath = "src/main/resources/gl_sources.json"
        def jsonFile = file(jsonFilePath)

        if (!jsonFile.exists()) {
            return
        }

        def parser = new JsonSlurper()
        def jsonData = parser.parse(jsonFile) as List<Map<String, String>>

        jsonData.each { dependency ->
            def artifactName = dependency["name"]
            def artifactUrl = dependency["url"]
            def outputPath = "${layout.buildDirectory.dir("resources/content").get().asFile}/${artifactName}.zip"

            try {
                download.run {
                    src artifactUrl
                    dest outputPath
                }
            } catch (Exception _) {
            }
        }
    }
}

tasks.register('copyToResources', Copy) {
    dependsOn configurations.content, 'downloadGLSources'
    from configurations.content, layout.buildDirectory.dir("resources/content")
    into 'src/main/resources/content'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    rename {
        String filename ->
            if (filename.matches(".*.json\$")) {
                filename.replaceAll('-\\.json$', '.json')
            } else {
                filename.replaceAll('-.*.zip$', '.zip')
            }
    }
}

licenseMain.dependsOn copyToResources
compileJava.dependsOn copyToResources
processResources.dependsOn(copyToResources)