import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'nu.studer.jooq' version "$jooqPluginVer"
    id 'org.openjfx.javafxplugin' version "$javafxPluginVer"
    id "com.install4j.gradle" version "$install4jPluginVer"
    id 'com.github.johnrengelman.shadow' version "$shadowPluginVer"
}

apply plugin: 'application'
apply plugin: 'idea'

javafx {
    version = "$javafxVer"
    modules = ['javafx.controls', 'javafx.fxml']
}

repositories {
    maven { url 'https://maven.ej-technologies.com/repository' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } // TornadoFX 2.0 Snapshot
}

sourceSets {
    assets {
        resources {
            srcDir "${project(':assets').projectDir}/src/main/resource"
        }
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
        resources {
            srcDirs += [file('src/integration-test/resources'), assets.resources]
        }
    }
    main {
        resources {
            srcDirs += [assets.resources]
        }
    }
    test {
        resources {
            srcDirs += [assets.resources]
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom main
    integrationTestRuntime.extendsFrom main
}

application {
    mainClassName = "org.wycliffeassociates.otter.jvm.workbookapp.MainKt"
}

test {
    systemProperty 'testfx.robot', 'glass'
    systemProperty 'testfx.headless', 'true'
    systemProperty 'prism.order', 'sw'
    systemProperty 'prism.text', 'native'
}

apply from: './jooq.gradle'

boolean devbuild = hasProperty("devbuild")

//install4j tasks for building win/nix/mac installers. Executable jar can be built without it
install4j {
    vmParameters = ["-Dinstall4j.timestampUrl=http://timestamp.sectigo.com/"]
    faster = devbuild
    disableSigning = devbuild
    //pass in the install4j directory via -P if it's not in the default install location, e.q. for use with travis or arbitrary paths
    if (project.hasProperty('gradlewInstall4jDirectory')) {
        installDir = file(gradlewInstall4jDirectory)
    }
    //license must be passed via gradlew commandline -P as it can't be commit to public source control
    if (project.hasProperty('gradlewCommandLicenseProp')) {
        license = gradlewCommandLicenseProp
    }
    //gradle command Property for the code signing cert password
    if (project.hasProperty('gradlewwinKeystorePassword')) {
        winKeystorePassword = gradlewwinKeystorePassword
    }
}

task install4jdeploy(type: com.install4j.gradle.Install4jTask) {
    projectFile = 'otter.install4j'
    //Pass Build run # to install4j for versioning
    if (project.hasProperty('gradlewCommandVersionProp')) {
        release = gradlewCommandVersionProp
    }
}

dependencies {
    // ReactiveX
    implementation "io.reactivex.rxjava2:rxkotlin:$rxkotlinVer"
    implementation "com.github.thomasnield:rxkotlinfx:$rxkotlinfxVer"
    implementation "com.jakewharton.rxrelay2:rxrelay:$rxrelayVer"

    // TornadoFX
    implementation "no.tornado:tornadofx:$tornadofxVer"

    //OpenJFX cross-platform fat jar dependencies
    runtimeOnly "org.openjfx:javafx-graphics:$javafxVer:win"
    runtimeOnly "org.openjfx:javafx-graphics:$javafxVer:linux"
    runtimeOnly "org.openjfx:javafx-graphics:$javafxVer:mac"

    // SVG Loader
    implementation "com.github.jsarabia:FranzXaverSVG:$franzXaverSvgVer"

    // JFoenix
    implementation "com.jfoenix:jfoenix:$jfoenixVer"
    implementation "com.github.bkenn:kfoenix:$kfoenixVer"

    // ControlsFX
    implementation "org.wycliffeassociates:javafx-gridview:$javaGridviewVer"
    implementation "org.controlsfx:controlsfx:$controlsfxVer"

    // Ikonli
    implementation "org.kordamp.ikonli:ikonli-javafx:$ikonliVer"
    implementation "org.kordamp.ikonli:ikonli-fontawesome-pack:$ikonliVer"
    implementation "org.kordamp.ikonli:ikonli-fontawesome5-pack:$ikonliVer"
    implementation "org.kordamp.ikonli:ikonli-materialdesign-pack:$ikonliVer"
    implementation "org.kordamp.ikonli:ikonli-material-pack:$ikonliVer"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVer"
    implementation "com.squareup.retrofit2:converter-jackson:$retrofitJacksonVer"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitRxJava2Ver"

    // Jackson YAML
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVer"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVer"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:$jacksonVer"

    //Dagger2
    implementation "com.google.dagger:dagger:$daggerVer"
    kapt "com.google.dagger:dagger-compiler:$daggerVer"
    kaptIntegrationTest "com.google.dagger:dagger-compiler:$daggerVer"

    // Testing
    testImplementation "junit:junit:$junitVer"
    testImplementation "org.mockito:mockito-core:$mockitoVer"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVer"
    testImplementation "org.testfx:testfx-core:$testFxVer"
    testImplementation "org.testfx:testfx-junit:$testFxVer"
    testImplementation "org.testfx:openjfx-monocle:$testFxMonocleVer"
    integrationTestCompile group: 'junit', name: 'junit', version: "$junitVer"
    integrationTestCompile "org.mockito:mockito-core:$mockitoVer"
    integrationTestImplementation sourceSets.main.compileClasspath
    integrationTestImplementation sourceSets.main.output

    //WA Libraries
    implementation project(':assets')
    implementation project(':common')
    implementation project(':common:audio')
    implementation project(':jvm:controls')
    implementation project(':jvm:device')
    implementation project(':jvm:utils')
    implementation project(':jvm:workbookplugin')
    implementation "org.wycliffeassociates:kotlin-resource-container:$kotlinresourcecontainerVer"
    implementation "org.wycliffeassociates:usfmtools:$usfmToolsVer"

    // Atlassian commonmark (for rendering markdown)
    implementation "com.atlassian.commonmark:commonmark:$commonmarkVer"

    // jar loader
    implementation "org.clapper:javautil:$clapperJavaUtilVer"

    // Logging
    implementation "org.slf4j:slf4j-api:$slf4jApiVer"
    implementation "org.apache.logging.log4j:log4j-core:$log4j2Ver"
    implementation "org.apache.logging.log4j:log4j-slf4j18-impl:$log4j2Ver"

    // Sentry
    implementation "io.sentry:sentry:$sentryVer"

    implementation "com.github.Dansoftowner:jSystemThemeDetector:$systemThemeDectectorVer"
    implementation "com.install4j:install4j-runtime:$install4jVer"

    implementation "com.mpatric:mp3agic:$mp3TagVer"
    implementation "be.tarsos:tarsosdsp:$tarsosDspVer"
}

// tell gradle what to put in the jar
shadowJar {
    archiveFileName = 'workbookapp.jar'
    mergeServiceFiles()
    manifest {
        attributes(
                'Main-Class': "org.wycliffeassociates.otter.jvm.workbookapp.MainKt"
        )
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

configure(integrationTest) {
    group = 'verification'
    description = 'Cross-package and e2e tests, may require DB'
}

//////////////////////////////////// Custom Tasks ///////////////////////////////////////////
task createVersionProperties(dependsOn: processResources) {
    doLast {
        if (project.hasProperty('gradlewCommandVersionProp')) {
            new File("$buildDir/resources/main/version.properties").withWriter { w ->
                Properties p = new Properties()
                p['version'] = gradlewCommandVersionProp
                p.store w, null
            }
        }
    }
}

task createGithubProperties(dependsOn: processResources) {
    doLast {
        if (project.hasProperty('githubRepoUrl') && project.hasProperty('githubOauthToken')) {
            new File("$buildDir/resources/main/github.properties").withWriter { w ->
                Properties p = new Properties()
                p['repo-url'] = githubRepoUrl
                p['oauth-token'] = githubOauthToken
                p.store w, null
            }
        }
    }
}

task createSentryProperties(dependsOn: processResources) {
    doLast {
        if (project.hasProperty('sentryDsn')) {
            new File("$buildDir/resources/main/sentry.properties").withWriter { w ->
                Properties p = new Properties()
                p['dsn'] = sentryDsn
                p.store w, null
            }
        }
    }
}

task createLocalesProperties(dependsOn: processResources) {
    doLast {
        FileTree resources = fileTree("$buildDir/resources/main").matching {
            include "Messages_*"
        }

        new File("$buildDir/resources/main/languages.properties").withWriter { w ->
            Properties p = new Properties()
            resources.files.each {
                String name = it.name.replace(".properties", "").replace("Messages_", "")
                p[name] = ''
            }
            p.store w, null
        }
    }
}

task copyMessages(dependsOn: processResources, type: Copy) {
    from file("$buildDir/resources/main/Messages_en.properties")
    into "$buildDir/resources/main"
    rename { "Messages.properties" }
}

task copyTestResources(dependsOn: processResources, type: Copy) {
    from "$buildDir/resources/main"
    into "$buildDir/resources/test"
    include "*.properties"
}

///////////Customize Gradle Test Output ////////////////////////////////
tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, " +
                        "${result.successfulTestCount} successes, " +
                        "${result.failedTestCount} failures, " +
                        "${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

idea {
    module {
        generatedSourceDirs += file('build/generated/source/kapt/integrationTest')
    }
}

compileJava.dependsOn ':jvm:recorderapp:copyJarToWorkbookAppResources'
compileJava.dependsOn ':jvm:markerapp:copyJarToWorkbookAppResources'
compileJava.dependsOn createVersionProperties
compileJava.dependsOn createGithubProperties
compileJava.dependsOn createSentryProperties
compileJava.dependsOn createLocalesProperties
compileJava.dependsOn copyMessages
compileJava.dependsOn copyTestResources
integrationTest.shouldRunAfter test
integrationTest.dependsOn ':assets:build'
integrationTest.dependsOn ':assets:copyToResources'
check.dependsOn integrationTest
install4jdeploy.dependsOn build
install4jdeploy.dependsOn integrationTest
