import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'nu.studer.jooq' version "$jooqPluginVer"
    id 'org.openjfx.javafxplugin' version "$javafxPluginVer"
    id "com.install4j.gradle" version "$install4jPluginVer"
}

apply plugin: 'application'
apply plugin: 'idea'

javafx {
    version = "$javafxVer"
    modules = ['javafx.controls', 'javafx.fxml']
}

repositories {
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' } // TornadoFX 2.0 Snapshot
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom main
    integrationTestRuntime.extendsFrom main
}

application {
    mainClassName = "org.wycliffeassociates.otter.jvm.workbookapp.MainKt"
}

apply from: './jooq.gradle'

//install4j tasks for building win/nix/mac installers. Executable jar can be built without it
install4j {
    //pass in the install4j directory via -P if it's not in the default install location, e.q. for use with travis or arbitrary paths
    if (project.hasProperty('gradlewInstall4jDirectory')) {
        installDir = file(gradlewInstall4jDirectory)
    }
    //license must be passed via gradlew commandline -P as it can't be commit to public source control
    if (project.hasProperty('gradlewCommandLicenseProp')) {
        license = gradlewCommandLicenseProp
    }
}

task install4jdeploy(type: com.install4j.gradle.Install4jTask) {
    projectFile = 'otter.install4j'
    //Pass Travis Build ID to install4j for versioning
    if (project.hasProperty('gradlewCommandVersionProp')) {
        release = gradlewCommandVersionProp
    }
}

dependencies {
    // ReactiveX
    implementation "io.reactivex.rxjava2:rxkotlin:$rxkotlinVer"
    implementation "com.github.thomasnield:rxkotlinfx:$rxkotlinfxVer"
    implementation "com.jakewharton.rxrelay2:rxrelay:$rxrelayVer"

    // TornadoFX
    implementation "no.tornado:tornadofx:$tornadofxVer"

    //OpenJFX cross-platform fat jar dependencies
    runtimeOnly "org.openjfx:javafx-graphics:$javafxVer:win"
    runtimeOnly "org.openjfx:javafx-graphics:$javafxVer:linux"
    runtimeOnly "org.openjfx:javafx-graphics:$javafxVer:mac"

    // SVG Loader
    implementation "com.github.afester.javafx:FranzXaver:$franzXaverVer"

    // JFoenix
    implementation "com.jfoenix:jfoenix:$jfoenixVer"

    // FontAwesomeFX
    implementation "de.jensd:fontawesomefx-commons:$fontawesomeCommonsVer"
    implementation "de.jensd:fontawesomefx-materialicons:$fontawesomeMaterialIconsVer"
    implementation "de.jensd:fontawesomefx-icons525:$fontawesomeIcons525Ver"
    implementation "de.jensd:fontawesomefx-materialdesignfont:$fontawesomeMaterialFontVer"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVer"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitMoshiVer"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitRxJava2Ver"

    // Jackson YAML
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVer"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVer"

    //Dagger2
    implementation "com.google.dagger:dagger:$daggerVer"
    kapt "com.google.dagger:dagger-compiler:$daggerVer"
    kaptIntegrationTest "com.google.dagger:dagger-compiler:$daggerVer"

    // Testing
    testImplementation "junit:junit:$junitVer"
    testImplementation "org.mockito:mockito-core:$mockitoVer"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVer"
    integrationTestCompile group: 'junit', name: 'junit', version: "$junitVer"
    integrationTestCompile "org.mockito:mockito-core:$mockitoVer"
    integrationTestImplementation sourceSets.main.compileClasspath
    integrationTestImplementation sourceSets.main.output

    //WA Libraries
    implementation project(':common')
    implementation project(':jvm:controls')
    implementation project(':jvm:device')
    implementation project(':jvm:utils')
    implementation project(':jvm:workbookplugin')
    implementation "org.wycliffeassociates:kotlin-resource-container:$kotlinresourcecontainerVer"
    implementation "org.wycliffeassociates:chromeabletabpane:$chromeabletabpaneVer"
    implementation "org.wycliffeassociates:jdenticon-kotlin:$jdenticonKoltinVer"

    // Atlassian commonmark (for rendering markdown)
    implementation "com.atlassian.commonmark:commonmark:$commonmarkVer"

    // jar loader
    implementation "org.clapper:javautil:$clapperJavaUtilVer"
}

// tell gradle what to put in the jar
jar {
    manifest {
        attributes(
                'Main-Class': "org.wycliffeassociates.otter.jvm.workbookapp.MainKt"
        )
    }
    from(configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude "META-INF/MANIFEST.MF"
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

configure(integrationTest) {
    group = 'verification'
    description = 'Cross-package and e2e tests, may require DB'
}

//////////////////////////////////// Custom Tasks ///////////////////////////////////////////
def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

task printVersionName {
    doLast {
        println getVersionName()
    }
}

integrationTest.mustRunAfter test
install4jdeploy.dependsOn build
install4jdeploy.dependsOn integrationTest

///////////Customize Gradle Test Output ////////////////////////////////
tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, " +
                        "${result.successfulTestCount} successes, " +
                        "${result.failedTestCount} failures, " +
                        "${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

idea {
    module {
        generatedSourceDirs += file('build/generated/source/kapt/integrationTest')
    }
}